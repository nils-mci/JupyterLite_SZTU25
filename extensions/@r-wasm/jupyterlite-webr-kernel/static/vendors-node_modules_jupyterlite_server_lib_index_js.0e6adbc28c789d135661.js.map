{"version":3,"file":"vendors-node_modules_jupyterlite_server_lib_index_js.0e6adbc28c789d135661.js","mappings":"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","sources":["webpack://@r-wasm/jupyterlite-webr-kernel/./node_modules/@jupyterlite/contents/src/drivecontents.ts","webpack://@r-wasm/jupyterlite-webr-kernel/./node_modules/@jupyterlite/contents/src/drivefs.ts","webpack://@r-wasm/jupyterlite-webr-kernel/./node_modules/@jupyterlite/contents/src/emscripten.ts","webpack://@r-wasm/jupyterlite-webr-kernel/./node_modules/@jupyterlite/server/src/index.ts","webpack://@r-wasm/jupyterlite-webr-kernel/./node_modules/@jupyterlite/server/src/service-worker-manager.ts","webpack://@r-wasm/jupyterlite-webr-kernel/./node_modules/@jupyterlite/server/src/service-worker.ts","webpack://@r-wasm/jupyterlite-webr-kernel/./node_modules/@jupyterlite/server/src/tokens.ts"],"sourcesContent":["import { PathExt } from '@jupyterlab/coreutils';\nimport { Contents } from '@jupyterlab/services';\nimport { BLOCK_SIZE, TDriveMethod, TDriveRequest, TDriveResponse } from './drivefs';\nimport { DIR_MODE, FILE_MODE } from './emscripten';\n\nexport interface IDriveContentsProcessor {\n  /**\n   * Process a content request\n   *\n   * @param request the request\n   */\n  processDriveRequest<T extends TDriveMethod>(\n    request: TDriveRequest<T>,\n  ): Promise<TDriveResponse<T>>;\n\n  /**\n   * Process the request to read a directory content\n   *\n   * @param request the request\n   */\n  readdir(request: TDriveRequest<'readdir'>): Promise<TDriveResponse<'readdir'>>;\n\n  /**\n   * Process the request to remove a directory\n   *\n   * @param request the request\n   */\n  rmdir(request: TDriveRequest<'rmdir'>): Promise<TDriveResponse<'rmdir'>>;\n\n  /**\n   * Process the request to rename a file or directory\n   *\n   * @param request the request\n   */\n  rename(request: TDriveRequest<'rename'>): Promise<TDriveResponse<'rename'>>;\n\n  /**\n   * Process the request to get the node mode (file or directory)\n   *\n   * @param request the request\n   */\n  getmode(request: TDriveRequest<'getmode'>): Promise<TDriveResponse<'getmode'>>;\n\n  /**\n   * Process the request to check if a node exist\n   *\n   * @param request the request\n   */\n  lookup(request: TDriveRequest<'lookup'>): Promise<TDriveResponse<'lookup'>>;\n\n  /**\n   * Process the request to create a directory/file\n   *\n   * @param request the request\n   */\n  mknod(request: TDriveRequest<'mknod'>): Promise<TDriveResponse<'mknod'>>;\n\n  /**\n   * Process the request to get a node stats\n   *\n   * @param request the request\n   */\n  getattr(request: TDriveRequest<'getattr'>): Promise<TDriveResponse<'getattr'>>;\n\n  /**\n   * Process the request to get the content of a file\n   *\n   * @param request the request\n   */\n  get(request: TDriveRequest<'get'>): Promise<TDriveResponse<'get'>>;\n\n  /**\n   * Process the request to write the content of a file\n   *\n   * @param request the request\n   */\n  put(request: TDriveRequest<'put'>): Promise<TDriveResponse<'put'>>;\n}\n\n/**\n * Class for processing a drive request from the DriveFS.\n */\nexport class DriveContentsProcessor implements IDriveContentsProcessor {\n  private contentsManager: Contents.IManager;\n\n  constructor(options: DriveContentsProcessor.IOptions) {\n    this.contentsManager = options.contentsManager;\n  }\n\n  async processDriveRequest<T extends TDriveMethod>(\n    request: TDriveRequest<T>,\n  ): Promise<TDriveResponse<T>> {\n    switch (request.method) {\n      case 'readdir':\n        return this.readdir(request as TDriveRequest<'readdir'>) as Promise<\n          TDriveResponse<T>\n        >;\n      case 'rmdir':\n        return this.rmdir(request as TDriveRequest<'rmdir'>) as Promise<\n          TDriveResponse<T>\n        >;\n      case 'rename':\n        return this.rename(request as TDriveRequest<'rename'>) as Promise<\n          TDriveResponse<T>\n        >;\n      case 'getmode':\n        return this.getmode(request as TDriveRequest<'getmode'>) as Promise<\n          TDriveResponse<T>\n        >;\n      case 'lookup':\n        return this.lookup(request as TDriveRequest<'lookup'>) as Promise<\n          TDriveResponse<T>\n        >;\n      case 'mknod':\n        return this.mknod(request as TDriveRequest<'mknod'>) as Promise<\n          TDriveResponse<T>\n        >;\n      case 'getattr':\n        return this.getattr(request as TDriveRequest<'getattr'>) as Promise<\n          TDriveResponse<T>\n        >;\n      case 'get':\n        return this.get(request as TDriveRequest<'get'>) as Promise<TDriveResponse<T>>;\n      case 'put':\n        return this.put(request as TDriveRequest<'put'>) as Promise<TDriveResponse<T>>;\n    }\n\n    throw `Drive request ${request.method} does not exist.`;\n  }\n\n  async readdir(request: TDriveRequest<'readdir'>): Promise<TDriveResponse<'readdir'>> {\n    const model = await this.contentsManager.get(request.path, { content: true });\n    let response: string[] = [];\n    if (model.type === 'directory' && model.content) {\n      response = model.content.map((subcontent: Contents.IModel) => subcontent.name);\n    }\n    return response;\n  }\n\n  async rmdir(request: TDriveRequest<'rmdir'>): Promise<TDriveResponse<'rmdir'>> {\n    await this.contentsManager.delete(request.path);\n    return null;\n  }\n\n  async rename(request: TDriveRequest<'rename'>): Promise<TDriveResponse<'rename'>> {\n    await this.contentsManager.rename(request.path, request.data.newPath);\n    return null;\n  }\n\n  async getmode(request: TDriveRequest<'getmode'>): Promise<TDriveResponse<'getmode'>> {\n    const model = await this.contentsManager.get(request.path);\n    let response: number;\n    if (model.type === 'directory') {\n      response = DIR_MODE;\n    } else {\n      response = FILE_MODE;\n    }\n    return response;\n  }\n\n  async lookup(request: TDriveRequest<'lookup'>): Promise<TDriveResponse<'lookup'>> {\n    let response: TDriveResponse<'lookup'>;\n\n    try {\n      const model = await this.contentsManager.get(request.path);\n      response = {\n        ok: true,\n        mode: model.type === 'directory' ? DIR_MODE : FILE_MODE,\n      };\n    } catch (e) {\n      response = { ok: false };\n    }\n\n    return response;\n  }\n\n  async mknod(request: TDriveRequest<'mknod'>): Promise<TDriveResponse<'mknod'>> {\n    const model = await this.contentsManager.newUntitled({\n      path: PathExt.dirname(request.path),\n      type: request.data.mode === DIR_MODE ? 'directory' : 'file',\n      ext: PathExt.extname(request.path),\n    });\n    await this.contentsManager.rename(model.path, request.path);\n    return null;\n  }\n\n  async getattr(request: TDriveRequest<'getattr'>): Promise<TDriveResponse<'getattr'>> {\n    const model = await this.contentsManager.get(request.path);\n    // create a default date for drives that send incomplete information\n    // for nested foldes and files\n    const defaultDate = new Date(0).toISOString();\n\n    return {\n      dev: 1,\n      nlink: 1,\n      uid: 0,\n      gid: 0,\n      rdev: 0,\n      size: model.size || 0,\n      blksize: BLOCK_SIZE,\n      blocks: Math.ceil(model.size || 0 / BLOCK_SIZE),\n      atime: model.last_modified || defaultDate, // TODO Get the proper atime?\n      mtime: model.last_modified || defaultDate,\n      ctime: model.created || defaultDate,\n      timestamp: 0,\n    };\n  }\n\n  async get(request: TDriveRequest<'get'>): Promise<TDriveResponse<'get'>> {\n    const model = await this.contentsManager.get(request.path, { content: true });\n\n    let response;\n\n    if (model.type !== 'directory') {\n      response = {\n        content:\n          model.format === 'json' ? JSON.stringify(model.content) : model.content,\n        format: model.format,\n      };\n    }\n\n    return response;\n  }\n\n  async put(request: TDriveRequest<'put'>): Promise<TDriveResponse<'put'>> {\n    await this.contentsManager.save(request.path, {\n      content:\n        request.data.format === 'json'\n          ? JSON.parse(request.data.data)\n          : request.data.data,\n      type: 'file',\n      format: request.data.format as Contents.FileFormat,\n    });\n    return null;\n  }\n}\n\n/**\n * A namespace for DriveContentsProcessor configurations, etc.\n */\nexport namespace DriveContentsProcessor {\n  /**\n   * Initialization options for a drive;\n   */\n  export interface IOptions {\n    contentsManager: Contents.IManager;\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\n// Types and implementation inspired from https://github.com/jvilk/BrowserFS\n// LICENSE: https://github.com/jvilk/BrowserFS/blob/8977a704ea469d05daf857e4818bef1f4f498326/LICENSE\n// And from https://github.com/gzuidhof/starboard-notebook\n\n// LICENSE: https://github.com/gzuidhof/starboard-notebook/blob/cd8d3fc30af4bd29cdd8f6b8c207df8138f5d5dd/LICENSE\nimport { Contents } from '@jupyterlab/services';\n\nimport {\n  FS,\n  ERRNO_CODES,\n  PATH,\n  DIR_MODE,\n  SEEK_CUR,\n  SEEK_END,\n  IEmscriptenStream,\n  instanceOfStream,\n  IEmscriptenStreamOps,\n  IEmscriptenNodeOps,\n  IEmscriptenFSNode,\n  IStats,\n} from './emscripten';\n\nexport const DRIVE_SEPARATOR = ':';\n\nexport const BLOCK_SIZE = 4096;\n\nconst encoder = new TextEncoder();\nconst decoder = new TextDecoder('utf-8');\n\nexport type TDriveMethod =\n  | 'readdir'\n  | 'rmdir'\n  | 'rename'\n  | 'getmode'\n  | 'lookup'\n  | 'mknod'\n  | 'getattr'\n  | 'get'\n  | 'put';\n\n/**\n * Type of the data argument for the drive request, based on the request name\n */\nexport type TDriveData = {\n  rename: {\n    /**\n     * The new path for the file\n     */\n    newPath: string;\n  };\n  mknod: {\n    /**\n     * The mode of the file to create\n     */\n    mode: number;\n  };\n  put: {\n    /**\n     * The file content to write\n     */\n    data: any;\n\n    /**\n     * The file content format\n     */\n    format: Contents.FileFormat;\n  };\n};\n\n/**\n * Drive request\n */\nexport type TDriveRequest<T extends TDriveMethod> = {\n  /**\n   * The method of the request (rmdir, readdir etc)\n   */\n  method: T;\n\n  /**\n   * A unique ID to identify the origin of this request\n   */\n  browsingContextId?: string;\n\n  /**\n   * The path to the file/directory for which the request was sent\n   */\n  path: string;\n} & (T extends keyof TDriveData ? { data: TDriveData[T] } : object);\n\ntype TDriveResponses = {\n  readdir: string[];\n  rmdir: null;\n  rename: null;\n  getmode: number;\n  lookup: DriveFS.ILookup;\n  mknod: null;\n  getattr: IStats;\n  get:\n    | {\n        /**\n         * The returned file content\n         */\n        content: any;\n\n        /**\n         * The content format\n         */\n        format: Contents.FileFormat;\n      }\n    | undefined;\n  put: null;\n};\n\n/**\n * Drive response\n */\nexport type TDriveResponse<T extends TDriveMethod> = TDriveResponses[T];\n\n// Mapping flag -> do we need to overwrite the file upon closing it\nconst flagNeedsWrite: { [flag: number]: boolean } = {\n  0 /*O_RDONLY*/: false,\n  1 /*O_WRONLY*/: true,\n  2 /*O_RDWR*/: true,\n  64 /*O_CREAT*/: true,\n  65 /*O_WRONLY|O_CREAT*/: true,\n  66 /*O_RDWR|O_CREAT*/: true,\n  129 /*O_WRONLY|O_EXCL*/: true,\n  193 /*O_WRONLY|O_CREAT|O_EXCL*/: true,\n  514 /*O_RDWR|O_TRUNC*/: true,\n  577 /*O_WRONLY|O_CREAT|O_TRUNC*/: true,\n  578 /*O_CREAT|O_RDWR|O_TRUNC*/: true,\n  705 /*O_WRONLY|O_CREAT|O_EXCL|O_TRUNC*/: true,\n  706 /*O_RDWR|O_CREAT|O_EXCL|O_TRUNC*/: true,\n  1024 /*O_APPEND*/: true,\n  1025 /*O_WRONLY|O_APPEND*/: true,\n  1026 /*O_RDWR|O_APPEND*/: true,\n  1089 /*O_WRONLY|O_CREAT|O_APPEND*/: true,\n  1090 /*O_RDWR|O_CREAT|O_APPEND*/: true,\n  1153 /*O_WRONLY|O_EXCL|O_APPEND*/: true,\n  1154 /*O_RDWR|O_EXCL|O_APPEND*/: true,\n  1217 /*O_WRONLY|O_CREAT|O_EXCL|O_APPEND*/: true,\n  1218 /*O_RDWR|O_CREAT|O_EXCL|O_APPEND*/: true,\n  4096 /*O_RDONLY|O_DSYNC*/: true,\n  4098 /*O_RDWR|O_DSYNC*/: true,\n};\n\n/** Implementation-specifc extension of an open stream, adding the file. */\nexport interface IDriveStream extends IEmscriptenStream {\n  file?: DriveFS.IFile;\n}\n\nexport class DriveFSEmscriptenStreamOps implements IEmscriptenStreamOps {\n  private fs: DriveFS;\n\n  constructor(fs: DriveFS) {\n    this.fs = fs;\n  }\n\n  open(stream: IDriveStream): void {\n    const path = this.fs.realPath(stream.node);\n    if (this.fs.FS.isFile(stream.node.mode)) {\n      stream.file = this.fs.API.get(path);\n    }\n  }\n\n  close(stream: IDriveStream): void {\n    if (!this.fs.FS.isFile(stream.node.mode) || !stream.file) {\n      return;\n    }\n\n    const path = this.fs.realPath(stream.node);\n\n    const flags = stream.flags;\n    let parsedFlags = typeof flags === 'string' ? parseInt(flags, 10) : flags;\n    parsedFlags &= 0x1fff;\n\n    let needsWrite = true;\n    if (parsedFlags in flagNeedsWrite) {\n      needsWrite = flagNeedsWrite[parsedFlags];\n    }\n\n    if (needsWrite) {\n      this.fs.API.put(path, stream.file);\n    }\n\n    stream.file = undefined;\n  }\n\n  read(\n    stream: IDriveStream,\n    buffer: Uint8Array,\n    offset: number,\n    length: number,\n    position: number,\n  ): number {\n    if (\n      length <= 0 ||\n      stream.file === undefined ||\n      position >= (stream.file.data.length || 0)\n    ) {\n      return 0;\n    }\n\n    const size = Math.min(stream.file.data.length - position, length);\n    buffer.set(stream.file.data.subarray(position, position + size), offset);\n    return size;\n  }\n\n  write(\n    stream: IDriveStream,\n    buffer: Uint8Array,\n    offset: number,\n    length: number,\n    position: number,\n  ): number {\n    if (length <= 0 || stream.file === undefined) {\n      return 0;\n    }\n\n    stream.node.timestamp = Date.now();\n\n    if (position + length > (stream.file?.data.length || 0)) {\n      const oldData = stream.file.data ? stream.file.data : new Uint8Array();\n      stream.file.data = new Uint8Array(position + length);\n      stream.file.data.set(oldData);\n    }\n\n    stream.file.data.set(buffer.subarray(offset, offset + length), position);\n\n    return length;\n  }\n\n  llseek(stream: IDriveStream, offset: number, whence: number): number {\n    let position = offset;\n    if (whence === SEEK_CUR) {\n      position += stream.position;\n    } else if (whence === SEEK_END) {\n      if (this.fs.FS.isFile(stream.node.mode)) {\n        if (stream.file !== undefined) {\n          position += stream.file.data.length;\n        } else {\n          throw new this.fs.FS.ErrnoError(this.fs.ERRNO_CODES.EPERM);\n        }\n      }\n    }\n\n    if (position < 0) {\n      throw new this.fs.FS.ErrnoError(this.fs.ERRNO_CODES.EINVAL);\n    }\n\n    return position;\n  }\n}\n\nexport class DriveFSEmscriptenNodeOps implements IEmscriptenNodeOps {\n  private fs: DriveFS;\n\n  constructor(fs: DriveFS) {\n    this.fs = fs;\n  }\n\n  protected node(\n    nodeOrStream: IEmscriptenFSNode | IEmscriptenStream,\n  ): IEmscriptenFSNode {\n    if (instanceOfStream(nodeOrStream)) {\n      return nodeOrStream.node;\n    }\n    return nodeOrStream;\n  }\n\n  getattr(value: IEmscriptenFSNode | IEmscriptenStream): IStats {\n    const node = this.node(value);\n    return {\n      ...this.fs.API.getattr(this.fs.realPath(node)),\n      mode: node.mode,\n      ino: node.id,\n    };\n  }\n\n  setattr(value: IEmscriptenFSNode | IEmscriptenStream, attr: IStats): void {\n    const node = this.node(value);\n    for (const [key, value] of Object.entries(attr)) {\n      switch (key) {\n        case 'mode':\n          node.mode = value;\n          break;\n        case 'timestamp':\n          node.timestamp = value;\n          break;\n        case 'size': {\n          const size = value;\n          const path = this.fs.realPath(node);\n          if (this.fs.FS.isFile(node.mode) && size >= 0) {\n            const file = this.fs.API.get(path);\n            const oldData = file.data ? file.data : new Uint8Array();\n            if (size !== oldData.length) {\n              if (size < oldData.length) {\n                file.data = file.data.slice(0, size);\n              } else {\n                file.data = new Uint8Array(size);\n                file.data.set(oldData);\n              }\n              this.fs.API.put(path, file);\n            }\n          } else {\n            console.warn('setattr size of', size, 'on', node, 'not yet implemented');\n          }\n          break;\n        }\n        default:\n          console.warn('setattr', key, 'of', value, 'on', node, 'not yet implemented');\n          break;\n      }\n    }\n  }\n\n  lookup(\n    parent: IEmscriptenFSNode | IEmscriptenStream,\n    name: string,\n  ): IEmscriptenFSNode {\n    const node = this.node(parent);\n    const path = this.fs.PATH.join2(this.fs.realPath(node), name);\n    const result = this.fs.API.lookup(path);\n    if (!result.ok) {\n      throw new this.fs.FS.ErrnoError(this.fs.ERRNO_CODES['ENOENT']);\n    }\n    return this.fs.createNode(node, name, result.mode!, 0);\n  }\n\n  mknod(\n    parent: IEmscriptenFSNode | IEmscriptenStream,\n    name: string,\n    mode: number,\n    dev: number,\n  ): IEmscriptenFSNode {\n    const node = this.node(parent);\n    const path = this.fs.PATH.join2(this.fs.realPath(node), name);\n    this.fs.API.mknod(path, mode);\n    return this.fs.createNode(node, name, mode, dev);\n  }\n\n  rename(\n    value: IEmscriptenFSNode | IEmscriptenStream,\n    newDir: IEmscriptenFSNode | IEmscriptenStream,\n    newName: string,\n  ): void {\n    const oldNode = this.node(value);\n    const newDirNode = this.node(newDir);\n    this.fs.API.rename(\n      oldNode.parent\n        ? this.fs.PATH.join2(this.fs.realPath(oldNode.parent), oldNode.name)\n        : oldNode.name,\n      this.fs.PATH.join2(this.fs.realPath(newDirNode), newName),\n    );\n\n    // Updating the in-memory node\n    oldNode.name = newName;\n    oldNode.parent = newDirNode;\n  }\n\n  unlink(parent: IEmscriptenFSNode | IEmscriptenStream, name: string): void {\n    this.fs.API.rmdir(this.fs.PATH.join2(this.fs.realPath(this.node(parent)), name));\n  }\n\n  rmdir(parent: IEmscriptenFSNode | IEmscriptenStream, name: string) {\n    this.fs.API.rmdir(this.fs.PATH.join2(this.fs.realPath(this.node(parent)), name));\n  }\n\n  readdir(value: IEmscriptenFSNode | IEmscriptenStream): string[] {\n    return this.fs.API.readdir(this.fs.realPath(this.node(value)));\n  }\n\n  symlink(\n    parent: IEmscriptenFSNode | IEmscriptenStream,\n    newName: string,\n    oldPath: string,\n  ): void {\n    throw new this.fs.FS.ErrnoError(this.fs.ERRNO_CODES['EPERM']);\n  }\n\n  readlink(node: IEmscriptenFSNode | IEmscriptenStream): string {\n    throw new this.fs.FS.ErrnoError(this.fs.ERRNO_CODES['EPERM']);\n  }\n}\n\n/**\n * ContentsAPI base class\n */\nexport abstract class ContentsAPI {\n  constructor(options: ContentsAPI.IOptions) {\n    this._driveName = options.driveName;\n    this._mountpoint = options.mountpoint;\n\n    this.FS = options.FS;\n    this.ERRNO_CODES = options.ERRNO_CODES;\n  }\n\n  lookup(path: string): DriveFS.ILookup {\n    return this.request({ method: 'lookup', path: this.normalizePath(path) });\n  }\n\n  getmode(path: string): number {\n    return this.request({ method: 'getmode', path: this.normalizePath(path) });\n  }\n\n  mknod(path: string, mode: number): null {\n    return this.request({\n      method: 'mknod',\n      path: this.normalizePath(path),\n      data: { mode },\n    });\n  }\n\n  rename(oldPath: string, newPath: string): null {\n    return this.request({\n      method: 'rename',\n      path: this.normalizePath(oldPath),\n      data: { newPath: this.normalizePath(newPath) },\n    });\n  }\n\n  readdir(path: string): string[] {\n    const dirlist = this.request({\n      method: 'readdir',\n      path: this.normalizePath(path),\n    });\n    dirlist.push('.');\n    dirlist.push('..');\n    return dirlist;\n  }\n\n  rmdir(path: string): null {\n    return this.request({ method: 'rmdir', path: this.normalizePath(path) });\n  }\n\n  get(path: string): DriveFS.IFile {\n    const response = this.request({\n      method: 'get',\n      path: this.normalizePath(path),\n    });\n\n    if (!response) {\n      throw new this.FS.ErrnoError(this.ERRNO_CODES['ENOENT']);\n    }\n\n    const serializedContent = response.content;\n    const format: 'json' | 'text' | 'base64' | null = response.format;\n\n    switch (format) {\n      case 'json':\n      case 'text':\n        return {\n          data: encoder.encode(serializedContent),\n          format,\n        };\n      case 'base64': {\n        const binString = atob(serializedContent);\n        const len = binString.length;\n        const data = new Uint8Array(len);\n        for (let i = 0; i < len; i++) {\n          data[i] = binString.charCodeAt(i);\n        }\n        return {\n          data,\n          format,\n        };\n      }\n      default:\n        throw new this.FS.ErrnoError(this.ERRNO_CODES['ENOENT']);\n    }\n  }\n\n  put(path: string, value: DriveFS.IFile): null {\n    switch (value.format) {\n      case 'json':\n      case 'text':\n        return this.request({\n          method: 'put',\n          path: this.normalizePath(path),\n          data: {\n            format: value.format,\n            data: decoder.decode(value.data),\n          },\n        });\n      case 'base64': {\n        let binary = '';\n        for (let i = 0; i < value.data.byteLength; i++) {\n          binary += String.fromCharCode(value.data[i]);\n        }\n        return this.request({\n          method: 'put',\n          path: this.normalizePath(path),\n          data: {\n            format: value.format,\n            data: btoa(binary),\n          },\n        });\n      }\n    }\n  }\n\n  getattr(path: string): IStats {\n    const stats = this.request({\n      method: 'getattr',\n      path: this.normalizePath(path),\n    });\n    // Turn datetimes into proper objects\n    if (stats.atime) {\n      stats.atime = new Date(stats.atime);\n    }\n    if (stats.mtime) {\n      stats.mtime = new Date(stats.mtime);\n    }\n    if (stats.ctime) {\n      stats.ctime = new Date(stats.ctime);\n    }\n    // ensure a non-undefined size (0 isn't great, though)\n    stats.size = stats.size || 0;\n    return stats;\n  }\n\n  /**\n   * Normalize a Path by making it compliant for the content manager\n   *\n   * @param path: the path relatively to the Emscripten drive\n   */\n  normalizePath(path: string): string {\n    // Remove mountpoint prefix\n    if (path.startsWith(this._mountpoint)) {\n      path = path.slice(this._mountpoint.length);\n    }\n\n    // Add JupyterLab drive name\n    if (this._driveName) {\n      path = `${this._driveName}${DRIVE_SEPARATOR}${path}`;\n    }\n\n    return path;\n  }\n\n  abstract request<T extends TDriveMethod>(data: TDriveRequest<T>): TDriveResponse<T>;\n\n  private _driveName: string;\n  private _mountpoint: string;\n\n  protected FS: FS;\n  protected ERRNO_CODES: ERRNO_CODES;\n}\n\n/**\n * An Emscripten-compatible synchronous Contents API using the service worker.\n */\nexport class ServiceWorkerContentsAPI extends ContentsAPI {\n  /**\n   * Construct a new ServiceWorkerContentsAPI.\n   */\n  constructor(options: ServiceWorkerContentsAPI.IOptions) {\n    super(options);\n\n    this._baseUrl = options.baseUrl;\n    this._browsingContextId = options.browsingContextId || '';\n  }\n\n  request<T extends TDriveMethod>(data: TDriveRequest<T>): TDriveResponse<T> {\n    const xhr = new XMLHttpRequest();\n    xhr.open('POST', encodeURI(this.endpoint), false);\n\n    // Add the origin browsing context ID to the request\n    const requestWithBrowsingContextId = {\n      data,\n      browsingContextId: this._browsingContextId,\n    };\n\n    try {\n      xhr.send(JSON.stringify(requestWithBrowsingContextId));\n    } catch (e) {\n      console.error(e);\n    }\n\n    if (xhr.status >= 400) {\n      throw new this.FS.ErrnoError(this.ERRNO_CODES['EINVAL']);\n    }\n\n    return JSON.parse(xhr.responseText);\n  }\n\n  /**\n   * Get the api/drive endpoint\n   */\n  get endpoint(): string {\n    return `${this._baseUrl}api/drive`;\n  }\n\n  private _baseUrl: string;\n  private _browsingContextId: string;\n}\n\nexport class DriveFS {\n  FS: FS;\n  API: ContentsAPI;\n  PATH: PATH;\n  ERRNO_CODES: ERRNO_CODES;\n  driveName: string;\n\n  constructor(options: DriveFS.IOptions) {\n    this.FS = options.FS;\n    this.PATH = options.PATH;\n    this.ERRNO_CODES = options.ERRNO_CODES;\n    this.API = this.createAPI(options);\n\n    this.driveName = options.driveName;\n\n    this.node_ops = new DriveFSEmscriptenNodeOps(this);\n    this.stream_ops = new DriveFSEmscriptenStreamOps(this);\n  }\n\n  node_ops: IEmscriptenNodeOps;\n  stream_ops: IEmscriptenStreamOps;\n\n  /**\n   * Create the ContentsAPI.\n   *\n   * This is supposed to be overwritten if needed.\n   */\n  createAPI(options: DriveFS.IOptions): ContentsAPI {\n    if (!options.browsingContextId || !options.baseUrl) {\n      throw new Error(\n        'Cannot create service-worker API without current browsingContextId',\n      );\n    }\n\n    return new ServiceWorkerContentsAPI(options as ServiceWorkerContentsAPI.IOptions);\n  }\n\n  mount(mount: any): IEmscriptenFSNode {\n    return this.createNode(null, mount.mountpoint, DIR_MODE | 511, 0);\n  }\n\n  createNode(\n    parent: IEmscriptenFSNode | null,\n    name: string,\n    mode: number,\n    dev: number,\n  ): IEmscriptenFSNode {\n    const FS = this.FS;\n    if (!FS.isDir(mode) && !FS.isFile(mode)) {\n      throw new FS.ErrnoError(this.ERRNO_CODES['EINVAL']);\n    }\n    const node = FS.createNode(parent, name, mode, dev);\n    node.node_ops = this.node_ops;\n    node.stream_ops = this.stream_ops;\n    return node;\n  }\n\n  getMode(path: string): number {\n    return this.API.getmode(path);\n  }\n\n  realPath(node: IEmscriptenFSNode): string {\n    const parts: string[] = [];\n    let currentNode: IEmscriptenFSNode = node;\n\n    parts.push(currentNode.name);\n    while (currentNode.parent !== currentNode) {\n      currentNode = currentNode.parent;\n      parts.push(currentNode.name);\n    }\n    parts.reverse();\n\n    return this.PATH.join.apply(null, parts);\n  }\n}\n\n/**\n * A namespace for ContentsAPI configurations, etc.\n */\nexport namespace ContentsAPI {\n  /**\n   * Initialization options for a contents API;\n   */\n  export interface IOptions {\n    /**\n     * The name of the drive to use for the contents API request.\n     */\n    driveName: string;\n\n    /**\n     * Where to mount files in the kernel.\n     */\n    mountpoint: string;\n\n    /**\n     * The filesystem module API.\n     */\n    FS: FS;\n\n    /**\n     * The filesystem error codes.\n     */\n    ERRNO_CODES: ERRNO_CODES;\n  }\n}\n\n/**\n * A namespace for ServiceWorkerContentsAPI configurations, etc.\n */\nexport namespace ServiceWorkerContentsAPI {\n  /**\n   * Initialization options for a service worker contents API\n   */\n  export interface IOptions extends ContentsAPI.IOptions {\n    /**\n     * The base URL.\n     */\n    baseUrl: string;\n\n    /**\n     * The ID of the browsing context where the request originated.\n     */\n    browsingContextId: string;\n  }\n}\n\n/**\n * A namespace for DriveFS configurations, etc.\n */\nexport namespace DriveFS {\n  /**\n   * A file representation;\n   */\n  export interface IFile {\n    data: Uint8Array;\n    format: 'json' | 'text' | 'base64';\n  }\n\n  /**\n   * The response to a lookup request;\n   */\n  export interface ILookup {\n    ok: boolean;\n    mode?: number;\n  }\n\n  /**\n   * Initialization options for a drive;\n   */\n  export interface IOptions {\n    FS: FS;\n    PATH: PATH;\n    ERRNO_CODES: ERRNO_CODES;\n    baseUrl: string;\n    driveName: string;\n    mountpoint: string;\n    browsingContextId?: string;\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\n// Types and implementation inspired from https://github.com/jvilk/BrowserFS\n// LICENSE: https://github.com/jvilk/BrowserFS/blob/8977a704ea469d05daf857e4818bef1f4f498326/LICENSE\n// And from https://github.com/gzuidhof/starboard-notebook\n\n// LICENSE: https://github.com/gzuidhof/starboard-notebook/blob/cd8d3fc30af4bd29cdd8f6b8c207df8138f5d5dd/LICENSE\n\n/**\n * Types for Emscripten primitives.\n *\n * Ideally, much more of these would be taken from `@types/emscripten`.\n */\n\ntype EmscriptenFS = typeof FS;\n\nexport const DIR_MODE = 16895; // 040777\nexport const FILE_MODE = 33206; // 100666\nexport const SEEK_CUR = 1;\nexport const SEEK_END = 2;\n\nexport interface IStats {\n  dev: number;\n  ino?: number;\n  mode?: number;\n  nlink: number;\n  uid: number;\n  gid: number;\n  rdev: number;\n  size: number;\n  blksize: number;\n  blocks: number;\n  atime: Date | string;\n  mtime: Date | string;\n  ctime: Date | string;\n  timestamp?: number;\n}\n\nexport interface IEmscriptenFSNode {\n  id: number;\n  name: string;\n  mode: number;\n  parent: IEmscriptenFSNode;\n  mount: { opts: { root: string } };\n  stream_ops: IEmscriptenStreamOps;\n  node_ops: IEmscriptenNodeOps;\n  timestamp: number;\n}\n\nexport interface IEmscriptenStream {\n  node: IEmscriptenFSNode;\n  nfd: any;\n  flags: string;\n  position: number;\n}\n\nexport function instanceOfStream(\n  nodeOrStream: IEmscriptenFSNode | IEmscriptenStream,\n): nodeOrStream is IEmscriptenStream {\n  return 'node' in nodeOrStream;\n}\n\nexport interface IEmscriptenNodeOps {\n  getattr(node: IEmscriptenFSNode | IEmscriptenStream): IStats;\n  setattr(node: IEmscriptenFSNode | IEmscriptenStream, attr: IStats): void;\n  lookup(\n    parent: IEmscriptenFSNode | IEmscriptenStream,\n    name: string,\n  ): IEmscriptenFSNode;\n  mknod(\n    parent: IEmscriptenFSNode | IEmscriptenStream,\n    name: string,\n    mode: number,\n    dev: number,\n  ): IEmscriptenFSNode;\n  rename(\n    oldNode: IEmscriptenFSNode | IEmscriptenStream,\n    newDir: IEmscriptenFSNode | IEmscriptenStream,\n    newName: string,\n  ): void;\n  unlink(parent: IEmscriptenFSNode | IEmscriptenStream, name: string): void;\n  rmdir(parent: IEmscriptenFSNode | IEmscriptenStream, name: string): void;\n  readdir(node: IEmscriptenFSNode | IEmscriptenStream): string[];\n  symlink(\n    parent: IEmscriptenFSNode | IEmscriptenStream,\n    newName: string,\n    oldPath: string,\n  ): void;\n  readlink(node: IEmscriptenFSNode | IEmscriptenStream): string;\n}\n\nexport interface IEmscriptenStreamOps {\n  open(stream: IEmscriptenStream): void;\n  close(stream: IEmscriptenStream): void;\n  read(\n    stream: IEmscriptenStream,\n    buffer: Uint8Array,\n    offset: number,\n    length: number,\n    position: number,\n  ): number;\n  write(\n    stream: IEmscriptenStream,\n    buffer: Uint8Array,\n    offset: number,\n    length: number,\n    position: number,\n  ): number;\n  llseek(stream: IEmscriptenStream, offset: number, whence: number): number;\n}\n\n/**\n * The emscripten filesystem module API.\n */\nexport type FS = EmscriptenFS & {\n  ErrnoError: any;\n  createNode: (\n    parent: IEmscriptenFSNode | null,\n    name: string,\n    mode: number,\n    dev: number,\n  ) => IEmscriptenFSNode;\n};\n\n/**\n * The emscripten filesystem error codes.\n */\nexport type ERRNO_CODES = any;\n\n/**\n * The emscripten FS Path API.\n */\nexport type PATH = {\n  basename: (path: string) => string;\n  dirname: (path: string) => string;\n  join: (...parts: string[]) => string;\n  join2: (l: string, r: string) => string;\n  normalize: (path: string) => string;\n  splitPath: (filename: string) => string;\n};\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nexport * from './tokens';\nexport * from './service-worker-manager';\n","import { PageConfig, URLExt } from '@jupyterlab/coreutils';\n\nimport { Contents } from '@jupyterlab/services';\n\nimport {\n  DriveContentsProcessor,\n  TDriveMethod,\n  TDriveRequest,\n} from '@jupyterlite/contents';\n\nimport { PromiseDelegate, UUID } from '@lumino/coreutils';\n\nimport { ISignal, Signal } from '@lumino/signaling';\n\nimport { IServiceWorkerManager, WORKER_NAME } from './tokens';\n\n/**\n * The service-worker broadcast channel id\n */\nexport const SERVICE_WORKER_BROADCAST_CHANNEL_ID = '/sw-api.v1';\n\n/**\n * The version of the app\n */\nconst VERSION = PageConfig.getOption('appVersion');\n\n/**\n * Used to keep the service worker alive\n */\nconst SW_PING_ENDPOINT = '/api/service-worker-heartbeat';\n\n/**\n * A class that manages the ServiceWorker registration and communication,\n * used for accessing the file system.\n */\nexport class ServiceWorkerManager implements IServiceWorkerManager {\n  /**\n   * Construct a new ServiceWorkerManager.\n   */\n  constructor(options: IServiceWorkerManager.IOptions) {\n    const workerUrl =\n      options.workerUrl ?? URLExt.join(PageConfig.getBaseUrl(), WORKER_NAME);\n    const fullWorkerUrl = new URL(workerUrl, window.location.href);\n    const enableCache = PageConfig.getOption('enableServiceWorkerCache') || 'false';\n    fullWorkerUrl.searchParams.set('enableCache', enableCache);\n\n    // Initialize broadcast channel related properties\n    this._browsingContextId = UUID.uuid4();\n    this._contents = options.contents;\n    this._broadcastChannel = new BroadcastChannel(SERVICE_WORKER_BROADCAST_CHANNEL_ID);\n    this._broadcastChannel.addEventListener('message', this._onBroadcastMessage);\n\n    this._driveContentsProcessor = new DriveContentsProcessor({\n      contentsManager: this._contents,\n    });\n\n    void this._initialize(fullWorkerUrl.href).catch(console.warn);\n  }\n\n  /**\n   * A signal emitted when the registration changes.\n   */\n  get registrationChanged(): ISignal<\n    IServiceWorkerManager,\n    ServiceWorkerRegistration | null\n  > {\n    return this._registrationChanged;\n  }\n\n  /**\n   * Whether the ServiceWorker is enabled or not.\n   */\n  get enabled(): boolean {\n    return this._registration !== null;\n  }\n\n  /**\n   * A unique id to identify the browsing context where the ServiceWorkerManager was instantiated.\n   */\n  get browsingContextId(): string {\n    return this._browsingContextId;\n  }\n\n  /**\n   * Whether the ServiceWorker is ready or not.\n   */\n  get ready(): Promise<void> {\n    return this._ready.promise;\n  }\n\n  /**\n   * Register a handler for stdin requests received via ServiceWorker.\n   * @param pathnameSuffix URL pathname suffix to match such as \"kernel\" or \"terminal\".\n   * @param stdinHandler\n   */\n  registerStdinHandler(\n    pathnameSuffix: string,\n    stdinHandler: IServiceWorkerManager.IStdinHandler,\n  ): void {\n    this._stdinHandlers.set(pathnameSuffix, stdinHandler);\n  }\n\n  /**\n   * Initialize the ServiceWorkerManager.\n   */\n  private async _initialize(workerUrl: string): Promise<void> {\n    const { serviceWorker } = navigator;\n\n    let registration: ServiceWorkerRegistration | null = null;\n\n    if (!serviceWorker) {\n      console.warn('ServiceWorkers not supported in this browser');\n      return;\n    } else if (serviceWorker.controller) {\n      const scriptURL = serviceWorker.controller.scriptURL;\n      await this._unregisterOldServiceWorkers(scriptURL);\n\n      registration = (await serviceWorker.getRegistration(scriptURL)) || null;\n      // eslint-disable-next-line no-console\n      console.info('JupyterLite ServiceWorker was already registered');\n    }\n\n    if (!registration && serviceWorker) {\n      try {\n        // eslint-disable-next-line no-console\n        console.info('Registering new JupyterLite ServiceWorker', workerUrl);\n        registration = await serviceWorker.register(workerUrl);\n        // eslint-disable-next-line no-console\n        console.info('JupyterLite ServiceWorker was sucessfully registered');\n      } catch (err: any) {\n        console.warn(err);\n        console.warn(\n          `JupyterLite ServiceWorker registration unexpectedly failed: ${err}`,\n        );\n      }\n    }\n\n    this._setRegistration(registration);\n\n    if (!registration) {\n      this._ready.reject(void 0);\n    } else {\n      this._ready.resolve(void 0);\n      setTimeout(this._pingServiceWorker, 20000);\n    }\n  }\n\n  /**\n   * Unregister old service workers if the version has changed.\n   */\n  private async _unregisterOldServiceWorkers(scriptURL: string): Promise<void> {\n    const versionKey = `${scriptURL}-version`;\n    // Check if we have an installed version. If we do, compare it to the current version\n    // and unregister all service workers if they are different.\n    const installedVersion = localStorage.getItem(versionKey);\n\n    if ((installedVersion && installedVersion !== VERSION) || !installedVersion) {\n      // eslint-disable-next-line no-console\n      console.info('New version, unregistering existing service workers.');\n      const registrations = await navigator.serviceWorker.getRegistrations();\n\n      await Promise.all(registrations.map((registration) => registration.unregister()));\n\n      // eslint-disable-next-line no-console\n      console.info('All existing service workers have been unregistered.');\n    }\n\n    localStorage.setItem(versionKey, VERSION);\n  }\n\n  /**\n   * Ping the service worker to keep it alive.\n   */\n  private async _pingServiceWorker(): Promise<void> {\n    const response = await fetch(SW_PING_ENDPOINT);\n    const text = await response.text();\n    if (text === 'ok') {\n      setTimeout(this._pingServiceWorker, 20000);\n    }\n  }\n\n  /**\n   * Set the registration and emit a signal.\n   */\n  private _setRegistration(registration: ServiceWorkerRegistration | null) {\n    this._registration = registration;\n    this._registrationChanged.emit(this._registration);\n  }\n\n  /**\n   * Handle a message received on the BroadcastChannel\n   *\n   * Message data is `any` because it can either be a drive message of type `TDriveReqiest<T>`\n   * or a stdin message of type `any` as ServiceWorkerManager passes it through to the\n   * stdinHandler without understanding or altering it.\n   */\n  private _onBroadcastMessage = async (\n    event: MessageEvent<{\n      data: any;\n      browsingContextId: string;\n      pathname: string;\n    }>,\n  ): Promise<void> => {\n    const { data, browsingContextId, pathname } = event.data;\n\n    if (browsingContextId !== this._browsingContextId) {\n      // Message is not meant for us\n      return;\n    }\n\n    if (pathname.includes('/api/stdin/')) {\n      this._onStdinMessage(pathname, data);\n    } else {\n      this._onDriveMessage(data);\n    }\n  };\n\n  private _onDriveMessage = async <T extends TDriveMethod>(\n    data: TDriveRequest<T>,\n  ): Promise<void> => {\n    const response = await this._driveContentsProcessor.processDriveRequest(data);\n    // pass the browsingContextId along so the Service Worker can identify the request\n    this._broadcastChannel.postMessage({\n      response,\n      browsingContextId: this._browsingContextId,\n    });\n  };\n\n  private _onStdinMessage = async (pathname: string, data: any): Promise<void> => {\n    // Expecting pathname of the form '<optional something>/api/stdin/<suffix>' from which\n    // suffix is used to identify which stdinHandler to call.\n    // `data: any` because ServiceWorkerManager accepts any data and passes it through\n    // to the stdinHandler without understanding or altering it.\n    const suffix = pathname.slice(pathname.lastIndexOf('/') + 1);\n    const stdinHandler = this._stdinHandlers.get(suffix);\n    if (stdinHandler !== undefined) {\n      const response = await stdinHandler(data);\n      this._broadcastChannel.postMessage({\n        response,\n        browsingContextId: this._browsingContextId,\n      });\n    } else {\n      console.warn(`No stdin handler registered for '${pathname}'`);\n    }\n  };\n\n  private _registration: ServiceWorkerRegistration | null = null;\n  private _registrationChanged = new Signal<this, ServiceWorkerRegistration | null>(\n    this,\n  );\n  private _ready = new PromiseDelegate<void>();\n  private _broadcastChannel: BroadcastChannel;\n  private _browsingContextId: string;\n  private _contents: Contents.IManager;\n  private _driveContentsProcessor: DriveContentsProcessor;\n  private _stdinHandlers = new Map<string, IServiceWorkerManager.IStdinHandler>();\n}\n","/**\n * The name of the cache\n */\nconst CACHE = 'precache';\n\n/**\n * Communication channel with the main thread\n */\nconst broadcast = new BroadcastChannel('/sw-api.v1');\n\n/**\n * Whether to enable the cache\n */\nlet enableCache = false;\n\n/**\n * Install event listeners\n */\nself.addEventListener('install', onInstall);\nself.addEventListener('activate', onActivate);\nself.addEventListener('fetch', onFetch);\n\n// Event handlers\n\n/**\n * Handle installation with the cache\n */\nfunction onInstall(event: ExtendableEvent): void {\n  void self.skipWaiting();\n  event.waitUntil(cacheAll());\n}\n\n/**\n * Handle activation.\n */\nfunction onActivate(event: ExtendableEvent): void {\n  // check if we should enable the cache\n  const searchParams = new URL(location.href).searchParams;\n  enableCache = searchParams.get('enableCache') === 'true';\n  event.waitUntil(self.clients.claim());\n}\n\n/**\n * Handle fetching a single resource.\n */\nasync function onFetch(event: FetchEvent): Promise<void> {\n  const { request } = event;\n\n  const url = new URL(event.request.url);\n  if (url.pathname === '/api/service-worker-heartbeat') {\n    event.respondWith(new Response('ok'));\n    return;\n  }\n\n  let responsePromise: Promise<Response> | null = null;\n  if (shouldBroadcast(url)) {\n    responsePromise = broadcastOne(request, url);\n  } else if (!shouldDrop(request, url)) {\n    responsePromise = maybeFromCache(event);\n  }\n\n  if (responsePromise) {\n    event.respondWith(responsePromise);\n  }\n}\n\n// utilities\n\n/** Get a cached response, and update cache. */\nasync function maybeFromCache(event: FetchEvent): Promise<Response> {\n  const { request } = event;\n\n  if (!enableCache) {\n    return await fetch(request);\n  }\n\n  let response: Response | null = await fromCache(request);\n\n  if (response) {\n    event.waitUntil(refetch(request));\n  } else {\n    response = await fetch(request);\n    event.waitUntil(updateCache(request, response.clone()));\n  }\n\n  return response;\n}\n\n/**\n * Restore a response from the cache based on the request.\n */\nasync function fromCache(request: Request): Promise<Response | null> {\n  const cache = await openCache();\n  const response = await cache.match(request);\n\n  if (!response || response.status === 404) {\n    return null;\n  }\n\n  return response;\n}\n\n/**\n * This is where we call the server to get the newest version of the\n * file to use the next time we show view\n */\nasync function refetch(request: Request): Promise<Response> {\n  const fromServer = await fetch(request);\n  await updateCache(request, fromServer);\n  return fromServer;\n}\n\n/**\n * Whether a given URL should be broadcast\n */\nfunction shouldBroadcast(url: URL): boolean {\n  return (\n    url.origin === location.origin &&\n    (url.pathname.includes('/api/drive') || url.pathname.includes('/api/stdin/'))\n  );\n}\n\n/**\n * Whether the fallback behavior should be used\n */\nfunction shouldDrop(request: Request, url: URL): boolean {\n  return (\n    request.method !== 'GET' ||\n    url.origin.match(/^http/) === null ||\n    url.pathname.includes('/api/')\n  );\n}\n\n/**\n * Forward request to main using the broadcast channel\n */\nasync function broadcastOne(request: Request, url: URL): Promise<Response> {\n  const message = await request.json();\n  const promise = new Promise<Response>((resolve) => {\n    const messageHandler = (event: MessageEvent) => {\n      const data = event.data;\n      if (data.browsingContextId !== message.browsingContextId) {\n        // bail if the message is not for us\n        return;\n      }\n      const response = data.response;\n      resolve(new Response(JSON.stringify(response)));\n      broadcast.removeEventListener('message', messageHandler);\n    };\n\n    broadcast.addEventListener('message', messageHandler);\n  });\n\n  // Add URL pathname to message\n  message.pathname = url.pathname;\n  broadcast.postMessage(message);\n\n  return await promise;\n}\n\nasync function openCache(): Promise<Cache> {\n  return await caches.open(CACHE);\n}\n\n/**\n * Cache a request/response pair.\n */\nasync function updateCache(request: Request, response: Response): Promise<void> {\n  const cache = await openCache();\n  return cache.put(request, response);\n}\n\n/**\n * Add all to the cache\n *\n * this is where we should (try to) add all relevant files\n */\nasync function cacheAll() {\n  const cache = await openCache();\n  return await cache.addAll([]);\n}\n","import { Token } from '@lumino/coreutils';\n\nimport { ISignal } from '@lumino/signaling';\n\nimport { Contents } from '@jupyterlab/services';\n\nimport SW_URL from './service-worker?text';\n\n/**\n * The token for the ServiceWorker.\n */\nexport const IServiceWorkerManager = new Token<IServiceWorkerManager>(\n  '@jupyterlite/server:IServiceWorkerManager',\n);\n\n/**\n * The interface for the ServiceWorkerRegistration.\n */\nexport interface IServiceWorkerManager {\n  /**\n   * Signal fired when the registration changed.\n   */\n  readonly registrationChanged: ISignal<\n    IServiceWorkerManager,\n    ServiceWorkerRegistration | null\n  >;\n\n  /**\n   * Whether the ServiceWorker is enabled or not.\n   */\n  readonly enabled: boolean;\n\n  /**\n   * A unique id to identify the browsing context where the ServiceWorkerManager was instantiated.\n   */\n  readonly browsingContextId: string;\n\n  /**\n   * A Promise that resolves when the ServiceWorker is registered, or rejects if it cannot\n   */\n  ready: Promise<void>;\n\n  /**\n   * Register a handler for stdin requests received via ServiceWorker.\n   * @param pathnameSuffix URL pathname suffix to match such as \"kernel\" or \"terminal\".\n   * @param stdinHandler\n   */\n  registerStdinHandler(\n    pathnameSuffix: string,\n    stdinHandler: IServiceWorkerManager.IStdinHandler,\n  ): void;\n}\n\n/**\n * A namespace for `ServiceWorkerManager` class.\n */\nexport namespace IServiceWorkerManager {\n  /**\n   * An options object for initializing a worker manager.\n   */\n  export interface IOptions {\n    /**\n     * The contents manager to use for handling drive contents requests\n     */\n    contents: Contents.IManager;\n\n    /**\n     * URL to load the worker file. Default to \"{baseURL}/service-worker.js\"\n     */\n    workerUrl?: string;\n  }\n\n  /**\n   * Interface for handler of stdin requests received via Service Worker.\n   *\n   * Types are `any` because they are defined by whatever calls `registerStdinHandler`\n   * and the ServiceWorkerManager does not need to understand them, it just passes them\n   * through without altering them.\n   */\n  export interface IStdinHandler {\n    (message: any): Promise<any>;\n  }\n}\n\nexport const WORKER_NAME = `${SW_URL}`.split('/').slice(-1)[0];\n"],"names":[],"sourceRoot":""}